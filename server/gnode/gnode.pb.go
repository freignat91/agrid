// Code generated by protoc-gen-go.
// source: server/gnode/gnode.proto
// DO NOT EDIT!

/*
Package gnode is a generated protocol buffer package.

It is generated from these files:
	server/gnode/gnode.proto

It has these top-level messages:
	AntMes
	AntRet
	PingRet
	AskConnectionRequest
	StoreFileRequest
	StoreFileRet
	EmptyRet
	RetrieveFileRequest
	RetrieveFileRet
*/
package gnode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AntMes struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Origin       string   `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	FromClient   string   `protobuf:"bytes,3,opt,name=from_client,json=fromClient" json:"from_client,omitempty"`
	Target       string   `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
	IsAnswer     bool     `protobuf:"varint,5,opt,name=isAnswer" json:"isAnswer,omitempty"`
	ReturnAnswer bool     `protobuf:"varint,6,opt,name=return_answer,json=returnAnswer" json:"return_answer,omitempty"`
	IsPathWriter bool     `protobuf:"varint,7,opt,name=is_path_writer,json=isPathWriter" json:"is_path_writer,omitempty"`
	OriginId     string   `protobuf:"bytes,8,opt,name=origin_id,json=originId" json:"origin_id,omitempty"`
	Path         []string `protobuf:"bytes,9,rep,name=path" json:"path,omitempty"`
	PathIndex    int32    `protobuf:"varint,10,opt,name=path_index,json=pathIndex" json:"path_index,omitempty"`
	Function     string   `protobuf:"bytes,11,opt,name=function" json:"function,omitempty"`
	Args         []string `protobuf:"bytes,12,rep,name=args" json:"args,omitempty"`
	TransferId   string   `protobuf:"bytes,13,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	Order        int64    `protobuf:"varint,14,opt,name=order" json:"order,omitempty"`
	NbBlockTotal int64    `protobuf:"varint,15,opt,name=nb_block_total,json=nbBlockTotal" json:"nb_block_total,omitempty"`
	NbBlock      int64    `protobuf:"varint,16,opt,name=nb_block,json=nbBlock" json:"nb_block,omitempty"`
	Replicas     int32    `protobuf:"varint,17,opt,name=replicas" json:"replicas,omitempty"`
	Size         int64    `protobuf:"varint,18,opt,name=size" json:"size,omitempty"`
	TargetedPath string   `protobuf:"bytes,19,opt,name=targeted_path,json=targetedPath" json:"targeted_path,omitempty"`
	NoBlocking   bool     `protobuf:"varint,20,opt,name=no_blocking,json=noBlocking" json:"no_blocking,omitempty"`
	Debug        bool     `protobuf:"varint,21,opt,name=debug" json:"debug,omitempty"`
	AnswerWait   bool     `protobuf:"varint,22,opt,name=answer_wait,json=answerWait" json:"answer_wait,omitempty"`
	NbThread     int32    `protobuf:"varint,23,opt,name=nb_thread,json=nbThread" json:"nb_thread,omitempty"`
	Thread       int32    `protobuf:"varint,24,opt,name=thread" json:"thread,omitempty"`
	Data         []byte   `protobuf:"bytes,25,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AntMes) Reset()                    { *m = AntMes{} }
func (m *AntMes) String() string            { return proto.CompactTextString(m) }
func (*AntMes) ProtoMessage()               {}
func (*AntMes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AntMes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AntMes) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *AntMes) GetFromClient() string {
	if m != nil {
		return m.FromClient
	}
	return ""
}

func (m *AntMes) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *AntMes) GetIsAnswer() bool {
	if m != nil {
		return m.IsAnswer
	}
	return false
}

func (m *AntMes) GetReturnAnswer() bool {
	if m != nil {
		return m.ReturnAnswer
	}
	return false
}

func (m *AntMes) GetIsPathWriter() bool {
	if m != nil {
		return m.IsPathWriter
	}
	return false
}

func (m *AntMes) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *AntMes) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *AntMes) GetPathIndex() int32 {
	if m != nil {
		return m.PathIndex
	}
	return 0
}

func (m *AntMes) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *AntMes) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *AntMes) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *AntMes) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *AntMes) GetNbBlockTotal() int64 {
	if m != nil {
		return m.NbBlockTotal
	}
	return 0
}

func (m *AntMes) GetNbBlock() int64 {
	if m != nil {
		return m.NbBlock
	}
	return 0
}

func (m *AntMes) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *AntMes) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *AntMes) GetTargetedPath() string {
	if m != nil {
		return m.TargetedPath
	}
	return ""
}

func (m *AntMes) GetNoBlocking() bool {
	if m != nil {
		return m.NoBlocking
	}
	return false
}

func (m *AntMes) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *AntMes) GetAnswerWait() bool {
	if m != nil {
		return m.AnswerWait
	}
	return false
}

func (m *AntMes) GetNbThread() int32 {
	if m != nil {
		return m.NbThread
	}
	return 0
}

func (m *AntMes) GetThread() int32 {
	if m != nil {
		return m.Thread
	}
	return 0
}

func (m *AntMes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AntRet struct {
	Ack bool   `protobuf:"varint,1,opt,name=ack" json:"ack,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *AntRet) Reset()                    { *m = AntRet{} }
func (m *AntRet) String() string            { return proto.CompactTextString(m) }
func (*AntRet) ProtoMessage()               {}
func (*AntRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AntRet) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *AntRet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PingRet struct {
	Host         string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NbNode       int32  `protobuf:"varint,3,opt,name=nb_node,json=nbNode" json:"nb_node,omitempty"`
	ClientNumber int32  `protobuf:"varint,4,opt,name=client_number,json=clientNumber" json:"client_number,omitempty"`
}

func (m *PingRet) Reset()                    { *m = PingRet{} }
func (m *PingRet) String() string            { return proto.CompactTextString(m) }
func (*PingRet) ProtoMessage()               {}
func (*PingRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRet) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PingRet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PingRet) GetNbNode() int32 {
	if m != nil {
		return m.NbNode
	}
	return 0
}

func (m *PingRet) GetClientNumber() int32 {
	if m != nil {
		return m.ClientNumber
	}
	return 0
}

type AskConnectionRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
}

func (m *AskConnectionRequest) Reset()                    { *m = AskConnectionRequest{} }
func (m *AskConnectionRequest) String() string            { return proto.CompactTextString(m) }
func (*AskConnectionRequest) ProtoMessage()               {}
func (*AskConnectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AskConnectionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AskConnectionRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AskConnectionRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type StoreFileRequest struct {
	ClientId     string   `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Path         string   `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	NbBlockTotal int64    `protobuf:"varint,4,opt,name=nb_block_total,json=nbBlockTotal" json:"nb_block_total,omitempty"`
	NbBlock      int64    `protobuf:"varint,5,opt,name=nb_block,json=nbBlock" json:"nb_block,omitempty"`
	BlockSize    int64    `protobuf:"varint,6,opt,name=blockSize" json:"blockSize,omitempty"`
	TransferId   string   `protobuf:"bytes,7,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	Key          string   `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Metadata     []string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty"`
}

func (m *StoreFileRequest) Reset()                    { *m = StoreFileRequest{} }
func (m *StoreFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreFileRequest) ProtoMessage()               {}
func (*StoreFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StoreFileRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *StoreFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StoreFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *StoreFileRequest) GetNbBlockTotal() int64 {
	if m != nil {
		return m.NbBlockTotal
	}
	return 0
}

func (m *StoreFileRequest) GetNbBlock() int64 {
	if m != nil {
		return m.NbBlock
	}
	return 0
}

func (m *StoreFileRequest) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *StoreFileRequest) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *StoreFileRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StoreFileRequest) GetMetadata() []string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StoreFileRet struct {
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	BlockSize  int64  `protobuf:"varint,2,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
}

func (m *StoreFileRet) Reset()                    { *m = StoreFileRet{} }
func (m *StoreFileRet) String() string            { return proto.CompactTextString(m) }
func (*StoreFileRet) ProtoMessage()               {}
func (*StoreFileRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StoreFileRet) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *StoreFileRet) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

type EmptyRet struct {
}

func (m *EmptyRet) Reset()                    { *m = EmptyRet{} }
func (m *EmptyRet) String() string            { return proto.CompactTextString(m) }
func (*EmptyRet) ProtoMessage()               {}
func (*EmptyRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RetrieveFileRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NbThread int32  `protobuf:"varint,3,opt,name=nbThread" json:"nbThread,omitempty"`
	Thread   int32  `protobuf:"varint,4,opt,name=thread" json:"thread,omitempty"`
}

func (m *RetrieveFileRequest) Reset()                    { *m = RetrieveFileRequest{} }
func (m *RetrieveFileRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveFileRequest) ProtoMessage()               {}
func (*RetrieveFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RetrieveFileRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *RetrieveFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetrieveFileRequest) GetNbThread() int32 {
	if m != nil {
		return m.NbThread
	}
	return 0
}

func (m *RetrieveFileRequest) GetThread() int32 {
	if m != nil {
		return m.Thread
	}
	return 0
}

type RetrieveFileRet struct {
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	BlockSize  int64  `protobuf:"varint,2,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
}

func (m *RetrieveFileRet) Reset()                    { *m = RetrieveFileRet{} }
func (m *RetrieveFileRet) String() string            { return proto.CompactTextString(m) }
func (*RetrieveFileRet) ProtoMessage()               {}
func (*RetrieveFileRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RetrieveFileRet) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *RetrieveFileRet) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func init() {
	proto.RegisterType((*AntMes)(nil), "gnode.AntMes")
	proto.RegisterType((*AntRet)(nil), "gnode.AntRet")
	proto.RegisterType((*PingRet)(nil), "gnode.PingRet")
	proto.RegisterType((*AskConnectionRequest)(nil), "gnode.AskConnectionRequest")
	proto.RegisterType((*StoreFileRequest)(nil), "gnode.StoreFileRequest")
	proto.RegisterType((*StoreFileRet)(nil), "gnode.StoreFileRet")
	proto.RegisterType((*EmptyRet)(nil), "gnode.EmptyRet")
	proto.RegisterType((*RetrieveFileRequest)(nil), "gnode.RetrieveFileRequest")
	proto.RegisterType((*RetrieveFileRet)(nil), "gnode.RetrieveFileRet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GNodeService service

type GNodeServiceClient interface {
	ExecuteFunction(ctx context.Context, in *AntMes, opts ...grpc.CallOption) (*AntRet, error)
	GetClientStream(ctx context.Context, opts ...grpc.CallOption) (GNodeService_GetClientStreamClient, error)
	AskConnection(ctx context.Context, in *AskConnectionRequest, opts ...grpc.CallOption) (*PingRet, error)
	Ping(ctx context.Context, in *AntMes, opts ...grpc.CallOption) (*PingRet, error)
	StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*StoreFileRet, error)
	RetrieveFile(ctx context.Context, in *RetrieveFileRequest, opts ...grpc.CallOption) (*RetrieveFileRet, error)
}

type gNodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewGNodeServiceClient(cc *grpc.ClientConn) GNodeServiceClient {
	return &gNodeServiceClient{cc}
}

func (c *gNodeServiceClient) ExecuteFunction(ctx context.Context, in *AntMes, opts ...grpc.CallOption) (*AntRet, error) {
	out := new(AntRet)
	err := grpc.Invoke(ctx, "/gnode.GNodeService/ExecuteFunction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNodeServiceClient) GetClientStream(ctx context.Context, opts ...grpc.CallOption) (GNodeService_GetClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GNodeService_serviceDesc.Streams[0], c.cc, "/gnode.GNodeService/GetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNodeServiceGetClientStreamClient{stream}
	return x, nil
}

type GNodeService_GetClientStreamClient interface {
	Send(*AntMes) error
	Recv() (*AntMes, error)
	grpc.ClientStream
}

type gNodeServiceGetClientStreamClient struct {
	grpc.ClientStream
}

func (x *gNodeServiceGetClientStreamClient) Send(m *AntMes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNodeServiceGetClientStreamClient) Recv() (*AntMes, error) {
	m := new(AntMes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gNodeServiceClient) AskConnection(ctx context.Context, in *AskConnectionRequest, opts ...grpc.CallOption) (*PingRet, error) {
	out := new(PingRet)
	err := grpc.Invoke(ctx, "/gnode.GNodeService/AskConnection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNodeServiceClient) Ping(ctx context.Context, in *AntMes, opts ...grpc.CallOption) (*PingRet, error) {
	out := new(PingRet)
	err := grpc.Invoke(ctx, "/gnode.GNodeService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNodeServiceClient) StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*StoreFileRet, error) {
	out := new(StoreFileRet)
	err := grpc.Invoke(ctx, "/gnode.GNodeService/StoreFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNodeServiceClient) RetrieveFile(ctx context.Context, in *RetrieveFileRequest, opts ...grpc.CallOption) (*RetrieveFileRet, error) {
	out := new(RetrieveFileRet)
	err := grpc.Invoke(ctx, "/gnode.GNodeService/RetrieveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GNodeService service

type GNodeServiceServer interface {
	ExecuteFunction(context.Context, *AntMes) (*AntRet, error)
	GetClientStream(GNodeService_GetClientStreamServer) error
	AskConnection(context.Context, *AskConnectionRequest) (*PingRet, error)
	Ping(context.Context, *AntMes) (*PingRet, error)
	StoreFile(context.Context, *StoreFileRequest) (*StoreFileRet, error)
	RetrieveFile(context.Context, *RetrieveFileRequest) (*RetrieveFileRet, error)
}

func RegisterGNodeServiceServer(s *grpc.Server, srv GNodeServiceServer) {
	s.RegisterService(&_GNodeService_serviceDesc, srv)
}

func _GNodeService_ExecuteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AntMes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNodeServiceServer).ExecuteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnode.GNodeService/ExecuteFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNodeServiceServer).ExecuteFunction(ctx, req.(*AntMes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNodeService_GetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNodeServiceServer).GetClientStream(&gNodeServiceGetClientStreamServer{stream})
}

type GNodeService_GetClientStreamServer interface {
	Send(*AntMes) error
	Recv() (*AntMes, error)
	grpc.ServerStream
}

type gNodeServiceGetClientStreamServer struct {
	grpc.ServerStream
}

func (x *gNodeServiceGetClientStreamServer) Send(m *AntMes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNodeServiceGetClientStreamServer) Recv() (*AntMes, error) {
	m := new(AntMes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GNodeService_AskConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNodeServiceServer).AskConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnode.GNodeService/AskConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNodeServiceServer).AskConnection(ctx, req.(*AskConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNodeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AntMes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNodeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnode.GNodeService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNodeServiceServer).Ping(ctx, req.(*AntMes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNodeService_StoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNodeServiceServer).StoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnode.GNodeService/StoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNodeServiceServer).StoreFile(ctx, req.(*StoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNodeService_RetrieveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNodeServiceServer).RetrieveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnode.GNodeService/RetrieveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNodeServiceServer).RetrieveFile(ctx, req.(*RetrieveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnode.GNodeService",
	HandlerType: (*GNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFunction",
			Handler:    _GNodeService_ExecuteFunction_Handler,
		},
		{
			MethodName: "AskConnection",
			Handler:    _GNodeService_AskConnection_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GNodeService_Ping_Handler,
		},
		{
			MethodName: "StoreFile",
			Handler:    _GNodeService_StoreFile_Handler,
		},
		{
			MethodName: "RetrieveFile",
			Handler:    _GNodeService_RetrieveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientStream",
			Handler:       _GNodeService_GetClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server/gnode/gnode.proto",
}

func init() { proto.RegisterFile("server/gnode/gnode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xa9, 0xff, 0x09, 0xfd, 0xd3, 0xb5, 0x6b, 0x6f, 0xe4, 0x06, 0x15, 0xd8, 0x02, 0x15,
	0x7a, 0x48, 0x8a, 0x16, 0x3d, 0x15, 0x28, 0xe0, 0xa4, 0x49, 0xe0, 0x43, 0x8c, 0x94, 0x0e, 0x90,
	0x23, 0xb1, 0x14, 0xc7, 0xf2, 0xc2, 0xd2, 0x52, 0x5d, 0xae, 0xec, 0x24, 0xf7, 0xbe, 0x56, 0x1f,
	0xa6, 0x4f, 0x52, 0xcc, 0xec, 0x52, 0x95, 0x25, 0xa3, 0x3d, 0xe4, 0x22, 0xec, 0x7c, 0xf3, 0xb3,
	0x33, 0xb3, 0xdf, 0x27, 0x82, 0xac, 0xd1, 0xde, 0xa2, 0x7d, 0x36, 0x35, 0x55, 0x89, 0xfe, 0xf7,
	0xe9, 0xc2, 0x56, 0xae, 0x12, 0x1d, 0x36, 0xd2, 0xbf, 0x3a, 0xd0, 0x3d, 0x33, 0xee, 0x0d, 0xd6,
	0x62, 0x0f, 0x62, 0x5d, 0xca, 0x68, 0x14, 0x8d, 0x07, 0x59, 0xac, 0x4b, 0x71, 0x0c, 0xdd, 0xca,
	0xea, 0xa9, 0x36, 0x32, 0x66, 0x2c, 0x58, 0xe2, 0x6b, 0x78, 0x74, 0x65, 0xab, 0x79, 0x3e, 0x99,
	0x69, 0x34, 0x4e, 0xb6, 0xd8, 0x09, 0x04, 0xbd, 0x60, 0x84, 0x12, 0x9d, 0xb2, 0x53, 0x74, 0xb2,
	0xed, 0x13, 0xbd, 0x25, 0x86, 0xd0, 0xd7, 0xf5, 0x99, 0xa9, 0xef, 0xd0, 0xca, 0xce, 0x28, 0x1a,
	0xf7, 0xb3, 0x95, 0x2d, 0xbe, 0x81, 0x5d, 0x8b, 0x6e, 0x69, 0x4d, 0xae, 0x7c, 0x40, 0x97, 0x03,
	0x12, 0x0f, 0x86, 0xa0, 0x6f, 0x61, 0x4f, 0xd7, 0xf9, 0x42, 0xb9, 0xeb, 0xfc, 0xce, 0x6a, 0x87,
	0x56, 0xf6, 0x7c, 0x94, 0xae, 0xdf, 0x2a, 0x77, 0xfd, 0x9e, 0x31, 0x71, 0x0a, 0x03, 0xdf, 0x69,
	0xae, 0x4b, 0xd9, 0xe7, 0x0e, 0xfa, 0x1e, 0x38, 0x2f, 0x85, 0x80, 0x36, 0xe5, 0xcb, 0xc1, 0xa8,
	0x35, 0x1e, 0x64, 0x7c, 0x16, 0x4f, 0x00, 0xb8, 0xa6, 0x36, 0x25, 0x7e, 0x90, 0x30, 0x8a, 0xc6,
	0x9d, 0x6c, 0x40, 0xc8, 0x39, 0x01, 0xd4, 0xf6, 0xd5, 0xd2, 0x4c, 0x9c, 0xae, 0x8c, 0x7c, 0xe4,
	0xcb, 0x35, 0x36, 0x95, 0x53, 0x76, 0x5a, 0xcb, 0xc4, 0x97, 0xa3, 0x33, 0xed, 0xc7, 0x59, 0x65,
	0xea, 0x2b, 0xb4, 0xd4, 0xc1, 0xae, 0xdf, 0x4f, 0x03, 0x9d, 0x97, 0xe2, 0x08, 0x3a, 0x95, 0x2d,
	0xd1, 0xca, 0xbd, 0x51, 0x34, 0x6e, 0x65, 0xde, 0xa0, 0xe1, 0x4c, 0x91, 0x17, 0xb3, 0x6a, 0x72,
	0x93, 0xbb, 0xca, 0xa9, 0x99, 0xdc, 0x67, 0x77, 0x62, 0x8a, 0xe7, 0x04, 0xbe, 0x23, 0x4c, 0x3c,
	0x86, 0x7e, 0x13, 0x25, 0x0f, 0xd8, 0xdf, 0x0b, 0x7e, 0xea, 0xd3, 0xe2, 0x62, 0xa6, 0x27, 0xaa,
	0x96, 0x5f, 0xf0, 0x10, 0x2b, 0x9b, 0xfa, 0xac, 0xf5, 0x27, 0x94, 0x82, 0x53, 0xf8, 0x4c, 0x2b,
	0xf7, 0x0f, 0x83, 0x25, 0xef, 0x54, 0x1e, 0x72, 0xa7, 0x49, 0x03, 0xd2, 0x4a, 0x69, 0x18, 0x53,
	0xf9, 0xfb, 0xb4, 0x99, 0xca, 0x23, 0xde, 0x37, 0x98, 0xea, 0x79, 0x40, 0x68, 0x98, 0x12, 0x8b,
	0xe5, 0x54, 0x7e, 0xc9, 0x2e, 0x6f, 0x50, 0x9a, 0x7f, 0xc7, 0xfc, 0x4e, 0x69, 0x27, 0x8f, 0x7d,
	0x9a, 0x87, 0xde, 0x2b, 0xed, 0xe8, 0x91, 0x4c, 0x91, 0xbb, 0x6b, 0x8b, 0xaa, 0x94, 0x27, 0xbe,
	0x5b, 0x53, 0xbc, 0x63, 0x9b, 0x09, 0xe4, 0x3d, 0x92, 0x3d, 0xc1, 0xa2, 0x29, 0x4a, 0xe5, 0x94,
	0x7c, 0x3c, 0x8a, 0xc6, 0x49, 0xc6, 0xe7, 0xf4, 0x7b, 0xe6, 0x6f, 0x86, 0x4e, 0x1c, 0x40, 0x4b,
	0x4d, 0x6e, 0x98, 0xc0, 0xfd, 0x8c, 0x8e, 0x81, 0xd1, 0x71, 0xc3, 0xe8, 0xb4, 0x82, 0xde, 0x5b,
	0x6d, 0xa6, 0x14, 0x2c, 0xa0, 0x7d, 0x5d, 0xd5, 0x2e, 0xd0, 0x9d, 0xcf, 0x84, 0x19, 0x35, 0xc7,
	0x90, 0xc0, 0x67, 0x71, 0x02, 0x3d, 0x53, 0xe4, 0x24, 0x15, 0x26, 0x7a, 0x27, 0xeb, 0x9a, 0xe2,
	0xa2, 0x2a, 0x79, 0x7b, 0x5e, 0x00, 0xb9, 0x59, 0xce, 0x0b, 0xb4, 0xcc, 0xf5, 0x4e, 0x96, 0x78,
	0xf0, 0x82, 0xb1, 0xf4, 0x02, 0x8e, 0xce, 0xea, 0x9b, 0x17, 0x95, 0x31, 0xc8, 0x7c, 0xc9, 0xf0,
	0x8f, 0x25, 0xae, 0xdd, 0x14, 0xad, 0xdd, 0xd4, 0x74, 0x14, 0xaf, 0x75, 0x44, 0x03, 0x2c, 0x82,
	0xc2, 0x62, 0xbd, 0x48, 0xff, 0x8c, 0xe1, 0xe0, 0xd2, 0x55, 0x16, 0x5f, 0xe9, 0x19, 0x36, 0xc5,
	0x4e, 0x61, 0x10, 0x3a, 0x59, 0xc9, 0xb7, 0xef, 0x01, 0xcf, 0xf7, 0xad, 0x99, 0x1a, 0x0d, 0xf8,
	0xba, 0x5e, 0x03, 0xdb, 0xec, 0x6b, 0xff, 0x0f, 0xfb, 0x3a, 0xf7, 0xd9, 0xf7, 0x15, 0x0c, 0x18,
	0xbf, 0x24, 0x9a, 0x75, 0xd9, 0xf7, 0x2f, 0xb0, 0xa9, 0x89, 0xde, 0x96, 0x26, 0x0e, 0xa0, 0x75,
	0x83, 0x1f, 0x83, 0x5c, 0xe9, 0x48, 0x74, 0x9e, 0xa3, 0x53, 0xfc, 0xe0, 0x5e, 0xad, 0x2b, 0x3b,
	0xbd, 0x80, 0x64, 0x6d, 0x0d, 0x6e, 0xb3, 0x7c, 0xb4, 0x55, 0xfe, 0x09, 0x80, 0x9f, 0x8d, 0x55,
	0x10, 0x6f, 0xb4, 0x97, 0x02, 0xf4, 0x5f, 0xce, 0x17, 0xee, 0x63, 0x86, 0x2e, 0xfd, 0x04, 0x87,
	0x19, 0x3a, 0xab, 0xf1, 0xf6, 0xf3, 0xb6, 0x3c, 0x84, 0x15, 0xa1, 0x03, 0x75, 0x1e, 0x22, 0x78,
	0x7b, 0x9d, 0xe0, 0xe9, 0xef, 0xb0, 0x7f, 0xff, 0xee, 0xcf, 0x1e, 0xed, 0xc7, 0xbf, 0x63, 0x48,
	0x5e, 0x13, 0x63, 0x2f, 0xd1, 0xde, 0xea, 0x09, 0x8a, 0x67, 0xb0, 0xff, 0xf2, 0x03, 0x4e, 0x96,
	0x0e, 0x5f, 0x35, 0xff, 0x62, 0xbb, 0x4f, 0xfd, 0x97, 0xc1, 0x7f, 0x08, 0x86, 0x6b, 0x26, 0x75,
	0xf0, 0x33, 0xec, 0xbf, 0x46, 0xe7, 0xff, 0xdb, 0x2f, 0x9d, 0x45, 0x35, 0xff, 0x8f, 0x84, 0x37,
	0x58, 0xa7, 0x3b, 0xe3, 0xe8, 0x87, 0x48, 0xfc, 0x0a, 0xbb, 0xf7, 0xb8, 0x2f, 0x4e, 0x9b, 0xa8,
	0x07, 0x14, 0x31, 0xdc, 0x0b, 0xce, 0xa0, 0xcf, 0x74, 0x47, 0x7c, 0x07, 0x6d, 0x32, 0x36, 0xef,
	0xda, 0x0e, 0xfc, 0x05, 0x06, 0x2b, 0x32, 0x88, 0x93, 0xe0, 0xde, 0x54, 0xc9, 0xf0, 0x70, 0xdb,
	0x41, 0xc9, 0xbf, 0x41, 0xb2, 0xbe, 0x71, 0x31, 0x0c, 0x61, 0x0f, 0x50, 0x60, 0x78, 0xfc, 0xa0,
	0xcf, 0xa5, 0x3b, 0x45, 0x97, 0xbf, 0xa9, 0x3f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x2d,
	0xfe, 0x7c, 0x6f, 0x07, 0x00, 0x00,
}
